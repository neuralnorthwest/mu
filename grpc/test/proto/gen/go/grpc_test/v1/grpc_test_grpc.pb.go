// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: grpc_test/v1/grpc_test.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPCTestServiceClient is the client API for GRPCTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCTestServiceClient interface {
	// GRPCTest is a test method
	GRPCTest(ctx context.Context, in *GRPCTestRequest, opts ...grpc.CallOption) (*GRPCTestResponse, error)
}

type gRPCTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCTestServiceClient(cc grpc.ClientConnInterface) GRPCTestServiceClient {
	return &gRPCTestServiceClient{cc}
}

func (c *gRPCTestServiceClient) GRPCTest(ctx context.Context, in *GRPCTestRequest, opts ...grpc.CallOption) (*GRPCTestResponse, error) {
	out := new(GRPCTestResponse)
	err := c.cc.Invoke(ctx, "/grpc_test.v1.GRPCTestService/GRPCTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCTestServiceServer is the server API for GRPCTestService service.
// All implementations must embed UnimplementedGRPCTestServiceServer
// for forward compatibility
type GRPCTestServiceServer interface {
	// GRPCTest is a test method
	GRPCTest(context.Context, *GRPCTestRequest) (*GRPCTestResponse, error)
	mustEmbedUnimplementedGRPCTestServiceServer()
}

// UnimplementedGRPCTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCTestServiceServer struct {
}

func (UnimplementedGRPCTestServiceServer) GRPCTest(context.Context, *GRPCTestRequest) (*GRPCTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GRPCTest not implemented")
}
func (UnimplementedGRPCTestServiceServer) mustEmbedUnimplementedGRPCTestServiceServer() {}

// UnsafeGRPCTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCTestServiceServer will
// result in compilation errors.
type UnsafeGRPCTestServiceServer interface {
	mustEmbedUnimplementedGRPCTestServiceServer()
}

func RegisterGRPCTestServiceServer(s grpc.ServiceRegistrar, srv GRPCTestServiceServer) {
	s.RegisterService(&GRPCTestService_ServiceDesc, srv)
}

func _GRPCTestService_GRPCTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GRPCTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCTestServiceServer).GRPCTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_test.v1.GRPCTestService/GRPCTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCTestServiceServer).GRPCTest(ctx, req.(*GRPCTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCTestService_ServiceDesc is the grpc.ServiceDesc for GRPCTestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCTestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_test.v1.GRPCTestService",
	HandlerType: (*GRPCTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GRPCTest",
			Handler:    _GRPCTestService_GRPCTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_test/v1/grpc_test.proto",
}
